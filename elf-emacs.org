#+title: GNU Emacs configuration for Emacs 30 and above
#+author: Владимир Рязанцев
#+email: russian.doll.36@yandex.ru
#+language: ru
#+options: ':t toc:nil num:nil author:t email:t

* Emacs30

* early-init.el
:PROPERTIES:
  :header-args:emacs-lisp: :tangle ~/.emacs.d/early-init.el
  :ID: early-init
:END:

* init.el
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/init.el :mkdirp yes
:ID: init
:END:
** Custom
#+begin_src emacs-lisp
  (setq path-file-custom "~/YandexDisk/emacs.conf.el")
  (if (file-exists-p path-file-custom)
        (load path-file-custom)
      (load "~/.emacs.d/conf.el")
      )
#+end_src
*** default file
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/emacs.conf.el :mkdirp yes
:ID: custom
:END:
#+begin_src emacs-lisp 
()
  
#+end_src
** Пакетны мененжер
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
 ;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
 ;; (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
 ;; (add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/") t)

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** path system
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config (exec-path-from-shell-initialize)
    )
#+end_src
** Шрифты
#+begin_src emacs-lisp
  (when (member fonts-name (font-family-list))
    (set-face-attribute 'default nil :height fonts-size :font fonts-name))
#+end_src

** Убрать всё лишнее
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Сочетание как в windows (C-c C-v)
#+begin_src emacs-lisp
  (cua-mode 1)
#+end_src

** Yes-No укорачиваем ответ
#+begin_src emacs-lisp
  (setq-default use-short-answers t)
#+end_src

** оформление темы
#+begin_src emacs-lisp
  (use-package modus-themes
    :custom
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs t)
    (modus-themes-mixed-fonts t)
    (modus-themes-to-toggle '(modus-operandi-tinted
  			    modus-vivendi-tinted))
    (load-theme "" t) 
    :bind
    (("C-c w t t" . modus-themes-toggle)
     ("C-c w t m" . modus-themes-select)
     ("C-c w t s" . consult-theme)))

  (use-package ef-themes)
  (ef-themes-select-light theme-name-light)
#+end_src

** icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :if (display-graphic-p))
#+end_src
** mode -line
:PROPERTIES:
:ID:       6943b90c-6879-4380-970f-83943a641d5f
:END:
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (setq doom-modeline-height 15)
    (setq doom-modeline-bar-width 4)
    (setq doom-modeline-window-width-limit 85)
    (setq doom-modeline-icon t)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-lsp-icon t)
    (setq doom-modeline-time-icon t)
    (setq doom-modeline-time-live-icon t)
    (doom-modeline-mode 1)
    )

  (use-package hide-mode-line
    :bind ("C-c m" . hide-mode-line-mode)
    :config
    (add-hook 'neotree-mode-hook #'hide-mode-line-mode)
    (add-hook 'treemacs-mode-hook #'hide-mode-line-mode)
    (hide-mode-line-mode nil)
    )
  (hide-mode-line-mode nil)
#+end_src
** Закрытие парных скобок
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
#+end_src
** Скобок разным цветом
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode t)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    )
       #+end_src
** hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :config (add-hook 'prog-mode-hook 'hl-todo-mode))
#+end_src
** Выделяем редактируемый текст
#+begin_src emacs-lisp
  ;;(use-package focus
  ;;    :config
  ;;(add-hook 'prog-mode-hook 'focus-mode)
  ;;(add-hook 'text-mode-hook 'focus-mode)
  ;;)
#+end_src
** Показать отступа
#+begin_src emacs-lisp
  (use-package indent-guide
    :config (add-hook 'prog-mode-hook 'indent-guide-mode))
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
   :ensure t
   :init
   (yas-global-mode t) ;; activate yasnippet
   (setq yas-snippet-dir "~/.emacs.d/snippets"))
#+end_src
** run code
#+begin_src emacs-lisp
  (use-package quickrun
    :bind ("<f9>" . quickrun)
    )
#+end_src
** Mixed-pitch mode
#+begin_src emacs-lisp
  (use-package mixed-pitch
  :hook
  (org-mode . mixed-pitch-mode))
#+end_src

** Управление окнами
#+begin_src emacs-lisp
  (setq split-width-threshold 120
      split-height-threshold nil)
#+end_src

#+begin_src emacs-lisp
  (use-package balanced-windows
  :config
  (balanced-windows-mode))
#+end_src

** Включить vertico
#+begin_src emacs-lisp
  (use-package vertico
  :init
  (vertico-mode)
  :custom
  (vertico-sort-function 'vertico-sort-history-alpha))
#+end_src

** Поиск частичных совпадений в любом порядке
#+begin_src emacs-lisp
  (use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides
   '((file (styles partial-completion)))))
#+end_src

** более подробные аннотации
#+begin_src emacs-lisp
  (use-package marginalia
  :init
  (marginalia-mode))
#+end_src

** Улучшена возможность обнаружения сочетаний клавиш
#+begin_src emacs-lisp
  (use-package which-key
  :config
  (which-key-mode)
  :custom
  (which-key-max-description-length 40)
  (which-key-lighter nil)
  (which-key-sort-order 'which-key-description-order))

#+end_src

** Контекстное меню с помощью правой кнопки мыши
#+begin_src emacs-lisp
  (when (display-graphic-p)
  (context-menu-mode))
#+end_src

** Улучшенные буферы справки
#+begin_src emacs-lisp
  (use-package helpful
  :bind
  (("C-h f" . helpful-function)
   ("C-h x" . helpful-command)
   ("C-h k" . helpful-key)
   ("C-h v" . helpful-variable)))
#+end_src

** Настройки текстового режима
#+begin_src emacs-lisp
  (use-package text-mode
  :ensure
  nil
  :hook
  (text-mode . visual-line-mode)
  :init
  (delete-selection-mode t)
  :custom
  (sentence-end-double-space nil)
  (scroll-error-top-bottom t)
  (save-interprogram-paste-before-kill t))
#+end_src

** Пороверка орфографии
[[https://ozi-blog.ru/proverka-orfografii-na-letu-v-emacs-hunspell-emacs/][Проверка орфографии на лету в emacs: hunspell + emacs]]
#+begin_src emacs-lisp
  ;;если есть программка hunspell, то используем её для проверки орфографии
  ;;словарь - en-ru
  (if (executable-find "hunspell")
      (progn
        (setq ispell-program-name "hunspell")
        (setq ispell-really-aspell nil)
        (setq ispell-really-hunspell t)
        (setq ispell-dictionary spell-dictionary)
      )
  )
  ;;режим работы с файлами в emacs по умолчанию - текстовый
  (setq default-major-mode 'text-mode)
  ;;включаем проверку синтаксиса на лету в emacs с помощью flyspell-mode
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1)))
  )
  ;;назначаем на Ctrl+l интерактивную проверку орфографии
  (global-set-key (kbd "C-l") 'ispell)
#+end_src
** Запуск организационного режима
#+begin_src emacs-lisp
  (use-package org
  :custom
  (org-startup-indented t)
  (org-hide-emphasis-markers t)
  (org-startup-with-inline-images t)
  (org-image-actual-width '(450))
  (org-fold-catch-invisible-edits 'error)
  (org-pretty-entities t)
  (org-use-sub-superscripts "{}")
  (org-id-link-to-org-use-id t)
  (org-fold-catch-invisible-edits 'show))
#+end_src
** Показать скрытые маркеры выделения
#+begin_src emacs-lisp
  (use-package org-appear
  :hook
  (org-mode . org-appear-mode))
#+end_src
** Предварительные просмотры LaTeX
#+begin_src emacs-lisp
  (use-package org-fragtog
  :after org
  :hook
  (org-mode . org-fragtog-mode)
  :custom
  (org-startup-with-latex-preview nil)
  (org-format-latex-options
   (plist-put org-format-latex-options :scale 2)
   (plist-put org-format-latex-options :foreground 'auto)
   (plist-put org-format-latex-options :background 'auto)))
#+end_src
** Современная организация: Большинство функций отключены для начинающих пользователей
#+begin_src emacs-lisp
  (use-package org-modern
  :hook
  (org-mode . org-modern-mode)
  :custom
  (org-modern-table nil)
  (org-modern-keyword nil)
  (org-modern-timestamp nil)
  (org-modern-priority nil)
  (org-modern-checkbox nil)
  (org-modern-tag nil)
  (org-modern-block-name nil)
  (org-modern-keyword nil)
  (org-modern-footnote nil)
  (org-modern-internal-target nil)
  (org-modern-radio-target nil)
  (org-modern-statistics nil)
  (org-modern-progress nil))

#+end_src
** Просмотр документа
#+begin_src emacs-lisp
  (use-package doc-view
  :custom
  (doc-view-resolution 300)
  (large-file-warning-threshold (* 50 (expt 2 20))))
#+end_src
** Чтение файлов ePub
#+begin_src emacs-lisp
  (use-package nov
  :init
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
** Управление Библиографией
#+begin_src emacs-lisp
  ;;(use-package bibtex)
#+end_src
** Biblio package for adding BibTeX records
#+begin_src emacs-lisp
  ;;(use-package biblio)
#+end_src
** Citar для доступа к библиографиям
#+begin_src emacs-lisp
  ;;(use-package citar)
#+end_src
** Читайте RSS-каналы с помощью Elfeed
#+begin_src emacs-lisp
      (use-package elfeed
      :custom
      (elfeed-db-directory
       (expand-file-name "elfeed" user-emacs-directory))
      (elfeed-show-entry-switch 'display-buffer)
      :bind
      ("C-c w e" . elfeed))
#+end_src
** Простая вставка веб-ссылок
#+begin_src emacs-lisp
  (use-package org-web-tools
  :bind
  (("C-c w w" . org-web-tools-insert-link-for-url)))

#+end_src
** Мультимедийная система Emacs
#+begin_src emacs-lisp
  (use-package emms
  :config
  (require 'emms-setup)
  (require 'emms-mpris)
  (emms-all)
  (emms-default-players)
  (emms-mpris-enable)
  :custom
  (emms-browser-covers #'emms-browser-cache-thumbnail-async)
  :bind
  (("C-c w m b" . emms-browser)
   ("C-c w m e" . emms)
   ("C-c w m p" . emms-play-playlist )
   ("<XF86AudioPrev>" . emms-previous)
   ("<XF86AudioNext>" . emms-next)
   ("<XF86AudioPlay>" . emms-pause)))

#+end_src
** Открывать файлы с помощью внешних приложений
#+begin_src emacs-lisp
  (use-package openwith
  :config
  (openwith-mode t)
  :custom
  (openwith-associations nil))
#+end_src
** Мимолетные заметки
#+begin_src emacs-lisp
  (use-package org
  :bind
  (("C-c c" . org-capture)
   ("C-c l" . org-store-link))
  :custom
  (org-goto-interface 'outline-path-completion)
  (org-capture-templates
   '(("t" "Новая задача" entry
      (file+headline org-default-notes-file "Tasks")
      "* TODO %i%?"))))
#+end_src
** Consult convenience functions
#+begin_src emacs-lisp
  (use-package consult
  :bind
  (("C-c w h" . consult-org-heading)
   ("C-c w g" . consult-grep))
  :config
  (add-to-list 'consult-preview-allowed-hooks 'visual-line-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package consult-notes
  :custom
  (consult-notes-denote-display-keywords-indicator "_")
  :bind
  (("C-c w d f" . consult-notes)
   ("C-c w d g" . consult-notes-search-in-all-notes))
  :init
  )
#+end_src

** Написание без отвлекающих факторов
#+begin_src emacs-lisp
  (use-package olivetti
  :demand t
  :bind
  (("C-c w o" . ews-olivetti)))
#+end_src
** Отменить Дерево
#+begin_src emacs-lisp
  (use-package undo-tree
  :config
  (global-undo-tree-mode)
  :custom
  (undo-tree-auto-save-history nil)
  :bind
  (("C-c w u" . undo-tree-visualise)))
#+end_src
** Экспортируйте ссылки в режиме Org
#+begin_src emacs-lisp
  (require 'oc-natbib)
  (require 'oc-csl)
#+end_src
** Поиск слов в онлайн-словарях
#+begin_src emacs-lisp
  (use-package dictionary
    :custom
    (dictionary-server "dict.org")
    :bind
    (("C-c w s d" . dictionary-lookup-definition)))

  (use-package powerthesaurus
    :bind
    (("C-c w s p" . powerthesaurus-transient)))
#+end_src
** Режим Writegood для слов-паразитов, пассивного письма и распознавания повторяющихся слов
#+begin_src emacs-lisp
  (use-package writegood-mode
  :bind
  (("C-c w s r" . writegood-reading-ease))
  :hook
  (text-mode . writegood-mode))
#+end_src

** Изменение названия
#+begin_src emacs-lisp
  (use-package titlecase
  :bind
  (("C-c w s t" . titlecase-dwim)
   ("C-c w s c" . ews-org-headings-titlecase)))
#+end_src
** Abbreviations
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'abbrev-mode)
#+end_src
** Lorem Ipsum generator
#+begin_src emacs-lisp
  (use-package lorem-ipsum
  :custom
  (lorem-ipsum-list-bullet "- ") ;; Org mode bullets
  :init
  (setq lorem-ipsum-sentence-separator
        (if sentence-end-double-space "  " " "))
  :bind
  (("C-c w s i" . lorem-ipsum-insert-paragraphs)))
#+end_src
** ediff
#+begin_src emacs-lisp
  (use-package ediff
  :ensure nil
  :custom
  (ediff-keep-variants nil)
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
** Fountain mode for writing scripts
#+begin_src emacs-lisp
  (use-package fountain-mode)
#+end_src
** Markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src
** Общие Настройки экспорта Организации
#+begin_src emacs-lisp
  (use-package org
  :custom
  (org-export-with-drawers nil)
  (org-export-with-todo-keywords nil)
  (org-export-with-toc nil)
  (org-export-with-smart-quotes t)
  (org-export-date-timestamp-format "%e %B %Y"))
#+end_src
** экспорт в epub
#+begin_src emacs-lisp
  (use-package ox-epub
  :demand t
  :init
  (require 'ox-org))
#+end_src
** Настройки экспорта LaTeX в PDF
#+begin_src emacs-lisp
  (use-package ox-latex
  :ensure nil
  :demand t
  :custom
  ;; Multiple LaTeX passes for bibliographies
  (org-latex-pdf-process
   '("pdflatex -interaction nonstopmode -output-directory %o %f"
     "bibtex %b"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  ;; Clean temporary files after export
  (org-latex-logfiles-extensions
   (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out"
           "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk"
           "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"
           "tex" "bcf"))))
#+end_src
** Конфигурация EWS в мягкой обложке
#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
  (add-to-list
   'org-latex-classes
   '("ews"
     "\\documentclass[11pt, twoside, hidelinks]{memoir}
      \\setstocksize{9.25in}{7.5in}
      \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
      \\setlrmarginsandblock{1.5in}{1in}{*} 
      \\setulmarginsandblock{1in}{1.5in}{*}
      \\checkandfixthelayout
      \\layout
      \\setcounter{tocdepth}{0}
      \\setsecnumdepth{subsection}
      \\renewcommand{\\baselinestretch}{1.2}
      \\setheadfoot{0.5in}{0.75in}
      \\setlength{\\footskip}{0.8in}
      \\chapterstyle{bianchi}
      \\renewcommand{\\beforechapskip}{-30pt}
      \\setsecheadstyle{\\normalfont \\raggedright \\textbf}
      \\setsubsecheadstyle{\\normalfont \\raggedright \\emph}
      \\setsubsubsecheadstyle{\\normalfont\\centering}
      \\pagestyle{myheadings}
      \\usepackage[font={small, it}]{caption}
      \\usepackage{ccicons}
      \\usepackage{ebgaramond}
      \\usepackage[authoryear]{natbib}
      \\bibliographystyle{apalike}
      \\usepackage{svg}
      \\hyphenation{mini-buffer}
      \\renewcommand{\\LaTeX}{LaTeX}
      \\renewcommand{\\TeX}{TeX}"
     ("\\chapter{%s}" . "\\chapter*{%s}")
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src
** Команда привязки организационной повестки дня и пользовательская повестка дня
#+begin_src emacs-lisp
  (use-package org
  :custom
  (org-agenda-custom-commands
   '(("e" "Agenda, next actions and waiting"
      ((agenda "" ((org-agenda-overriding-header "Next three days:")
                   (org-agenda-span 3)
                   (org-agenda-start-on-weekday nil)))
       (todo "NEXT" ((org-agenda-overriding-header "Next Actions:")))
       (todo "WAIT" ((org-agenda-overriding-header "Waiting:")))))))
  :bind
  (("C-c a" . org-agenda)))
#+end_src
** Управление файлами
#+begin_src emacs-lisp
  (use-package dired
    :ensure
    nil
    :commands
    (dired dired-jump)
    :custom
  (dired-listing-switches
   "-goah --group-directories-first --time-style=long-iso")
  (dired-dwim-target t)
  (delete-by-moving-to-trash t)
  :init
  (put 'dired-find-alternate-file 'disabled nil))
#+end_src
Скрывать или отображать скрытые файлы
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :hook (dired-mode . dired-omit-mode)
    :bind (:map dired-mode-map
                ( "."     . dired-omit-mode))
    :custom (dired-omit-files "^\\.[a-zA-Z0-9]+"))

#+end_src
** Резервные копии файлов
#+begin_src emacs-lisp
  (setq-default backup-directory-alist
              `(("." . ,(expand-file-name "backups/" user-emacs-directory)))
              version-control t
              delete-old-versions t
              create-lockfiles nil)
#+end_src
** Последние файлы
#+begin_src emacs-lisp
  (use-package recentf
  :config
  (recentf-mode t)
  :custom
  (recentf-max-saved-items 50)
  :bind
  (("C-c w r" . recentf-open)))
#+end_src
** bookmark
#+begin_src emacs-lisp
  (use-package bookmark
  :custom
  (bookmark-save-flag 1)
  :bind
  ("C-x r d" . bookmark-delete))
#+end_src
** Средство просмотра изображений
#+begin_src emacs-lisp
  (use-package emacs
  :custom
  (image-dired-external-viewer "gimp")
  :bind
  ((:map image-mode-map
         ("k" . image-kill-buffer)
         ("<right>" . image-next-file)
         ("<left>"  . image-previous-file))
   (:map dired-mode-map
         ("C-<return>" . image-dired-dired-display-external))))

(use-package image-dired
  :bind
  (("C-c w I" . image-dired))
  (:map image-dired-thumbnail-mode-map
        ("C-<right>" . image-dired-display-next)
        ("C-<left>"  . image-dired-display-previous)))

#+end_src
** pdf tools

** neotree
#+begin_src emacs-lisp
  (use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-files-by-mouse-dragging    t
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("<f8>"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))

(treemacs-start-on-boot)
#+end_src
** elglot
#+begin_src emacs-lisp
  (use-package eglot
  :ensure t
  :defer t
  :hook (c-mode . eglot-ensure)
  :bind (:map eglot-mode-map
              ("C-c C-d" . eldoc)
              ("C-c C-e" . eglot-rename)
              ("C-c C-f" . eglot-format-buffer)
  	    )
  )
#+end_src
** project-tab-groups
#+begin_src emacs-lisp
  (use-package project-tab-groups
  :ensure
  :config
  (project-tab-groups-mode 1))

(global-set-key (kbd "C-<next>") 'tab-next)
(global-set-key (kbd "C-<prior>") 'tab-previous)
#+end_src
** consult
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :demand t
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-x b" . consult-buffer)
           ("C-x C-b" . consult-bookmark)
           ("C-M-s" . consult-ripgrep)
           :map minibuffer-local-map
           ("C-r" . consult-history)))
#+end_src
** Complite
#+begin_src emacs-lisp
  (use-package company
    
    :config
    ;; No delay in showing suggestions.
    (setq company-idle-delay 1)
    ;; Show suggestions after entering one character.
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around nil)
    (company-tng-configure-default)

    (global-company-mode 1)

    (global-set-key (kbd "C-<tab>") 'company-complete))
#+end_src
** centaur-tabs
#+begin_src emacs-lisp
    (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    (setq centaur-tabs-height 24)
    (setq centaur-tabs-set-icons t)
    (setq centaur-tabs-icon-type 'all-the-icons)
    (setq centaur-tabs-set-bar 'under)
    (setq x-underline-at-descent-line t)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+end_src
** lisp
#+begin_src emacs-lisp
  ;;(load (expand-file-name "~/.roswell/helper.el"))
  (use-package sly
    :config
    (require 'sly-autoloads)
   
      (setq inferior-lisp-program "ros -Q run"))
      
#+end_src
** org-babel
#+begin_src emacs-lisp
  ;; GraphViz for flow diagrams
;; requires GraphViz software
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)))
#+end_src
** denote
#+begin_src emacs-lisp
 (use-package denote
	:ensure t
    :config
    ;;
    ;; General key bindings
    (setq denote-directory notes-directory)
    (setq denote-known-keywords '("emacs" "project"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    ;;
    ;; Tweaking the frontmatter
    (setq denote-org-front-matter
          "#+title: %s\n#+date: %s\n#+filetags: %s\n#+identifier: %s\n#+author:\n#+startup: content\n")
    :bind
   ;; ("C-c n o" . denote-open-or-create)
   ;; ("C-c n l" . denote-link-or-create)
   ;; ("C-c n b" . denote-link-find-file)
   ;; ("C-c n B" . denote-link-backlinks)
)
#+end_src

https://protesilaos.com/emacs/denote-journal
#+begin_src emacs-lisp
  (use-package denote-journal
  :ensure t
  ;; Bind those to some key for your convenience.
  :commands ( denote-journal-new-entry
              denote-journal-new-or-existing-entry
              denote-journal-link-or-create-entry )
  :hook (calendar-mode . denote-journal-calendar-mode)
  :config
  ;; Use the "journal" subdirectory of the `denote-directory'.  Set this
  ;; to nil to use the `denote-directory' instead.
  (setq denote-journal-directory
        (expand-file-name "journal" denote-directory))
  ;; Default keyword for new journal entries. It can also be a list of
  ;; strings.
  (setq denote-journal-keyword "journal")
  ;; Read the doc string of `denote-journal-title-format'.
  (setq denote-journal-title-format 'day-date-month-year))
#+end_src

https://github.com/emacs-straight/denote-menu
#+begin_src emacs-lisp
  (use-package denote-menu
    ;;(global-set-key (kbd "C-c z") #'list-denotes)

    ;;(define-key denote-menu-mode-map (kbd "c") #'denote-menu-clear-filters)
    ;;(define-key denote-menu-mode-map (kbd "/ r") #'denote-menu-filter)
    ;;(define-key denote-menu-mode-map (kbd "/ k") #'denote-menu-filter-by-keyword)
    ;;(define-key denote-menu-mode-map (kbd "/ o") #'denote-menu-filter-out-keyword)
    ;;(define-key denote-menu-mode-map (kbd "e") #'denote-menu-export-to-dired)
      )
#+end_src

https://protesilaos.com/emacs/denote-sequence
#+begin_src emacs-lisp
    (use-package  denote-sequence
      :config (setq denote-sequence-scheme 'alphanumeric))
#+end_src

https://protesilaos.com/emacs/denote-silo
#+begin_src emacs-lisp
  (use-package  denote-silo
    :commands ( denote-silo-create-note
                denote-silo-open-or-create
                denote-silo-select-silo-then-command
                denote-silo-dired
                denote-silo-cd )
    :config
    )
#+end_src
** consult
#+begin_src emacs-lisp
    (use-package consult
  	:ensure t
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      (setq register-preview-delay 0.3
            register-preview-function #'consult-register-format)

      (advice-add #'register-preview :override #'consult-register-window)

      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      )
#+end_src
** Меню
#+begin_src emacs-lisp
  (use-package major-mode-hydra :ensure t)
#+end_src
*** main menu
#+begin_src emacs-lisp
      (major-mode-hydra-define menu-main nil
      ;; 
      ("Файлы"
       (("c" (find-file "~/YandexDisk/Homes/Settings/emacs/elf-emacs.org" "► Открыть файл настроек ◄") "► Файл настроек ◄")
        ("q" nil "► Закрыть меню  ◄"))
       "Заметки"
       (("n" denote-open-or-create "► Создать новую               ◄")
        ("l" denote-link-or-create "► Создать ссылку              ◄")
        ("b" denote-link-find-file "► Создать ссылку и найти файл ◄")
        ("B" denote-link-backlinks "► Обратная ссылка             ◄"))
       ))
#+end_src
*** key master menu
#+begin_src emacs-lisp  
  (global-set-key (kbd "C-c n") #'major-mode-hydras/menu-main/body)   
#+end_src

** tmp
#+begin_src emacs-lisp
 
#+end_src
